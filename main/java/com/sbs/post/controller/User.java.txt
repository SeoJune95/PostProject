package com.sbs.post.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

public class User {
    public Long id;
    public String name;
    public String email;
    public String password;     // 외부노출 금지
    public DetailInformation detailInformation;     // 외부노출 금지
    
    
}

    @GetMapping()
    public ResponseEntity<user> showArticle(@PathVariable long id){
        User user = userService.findById(id);
        return ResponseEntity.ok().body(UserDto.from(user));
    }

    // user 의 민감한 정보가 외부에 노출될수도 있음.
    
// 그래서 dto 라는걸 만들어야함.

//UserDto.java
public class userDto {
    public final long id;
    public final String name;
    public final String email;
    public static UserDto from(User user){
        return new UserDto(user.getId(),user.getName(),user.getEmail());
    }
}

// 이렇게 하면 도메인에 캡슐화 가능.
// 사용자가 데이터를 선택적으로 전송 가능.
// Dto(vo)는 클라이언트 요청에 포함된 데이터를 서버측에 전달하는 역할.
// 그리고 서버측의 응답 데이터를 담아서 클라이언트에게 전달.
// 계층간 전달 수행자 역할을 한다.
